[2022-10-11 08:05:27,428] [builder.py:197]            [INFO]     |====================================================================================================|
[2022-10-11 08:05:27,428] [builder.py:197]            [INFO]     |                                  Music Collection in Z. 1 - Films                                  |
[2022-10-11 08:05:27,428] [builder.py:197]            [INFO]     |====================================================================================================|
[2022-10-11 08:05:27,428] [builder.py:198]            [INFO]     |                                                                                                    |
[2022-10-11 08:05:27,428] [builder.py:203]            [INFO]     |================================ Building Definition From Templates ================================|
[2022-10-11 08:05:27,428] [builder.py:211]            [DEBUG]    |                                                                                                    |
[2022-10-11 08:05:27,428] [meta.py:128]               [DEBUG]    | Template Genre                                                                                     |
[2022-10-11 08:05:27,429] [meta.py:129]               [DEBUG]    | Call: ordereddict([('name', 'Genre')])                                                             |
[2022-10-11 08:05:27,429] [meta.py:304]               [DEBUG]    |                                                                                                    |
[2022-10-11 08:05:27,429] [meta.py:305]               [DEBUG]    | Variables: ordereddict([('name', 'Genre'), ('collection_name', 'Music'), ('mapping_name', 'Music'), ('library_type', 'movie'), ('library_name', 'Z. 1 - Films'), ('name_encoded', 'Genre'), ('collection_name_encoded', 'Music'), ('mapping_name_encoded', 'Music'), ('library_type_encoded', 'movie'), ('library_name_encoded', 'Z.%201%20-%20Films'), ('collection_sort', 'Music')]) |
[2022-10-11 08:05:27,429] [meta.py:306]               [DEBUG]    |                                                                                                    |
[2022-10-11 08:05:27,429] [meta.py:307]               [DEBUG]    | Defaults: {}                                                                                       |
[2022-10-11 08:05:27,429] [meta.py:308]               [DEBUG]    |                                                                                                    |
[2022-10-11 08:05:27,429] [meta.py:309]               [DEBUG]    | Optional: []                                                                                       |
[2022-10-11 08:05:27,430] [meta.py:370]               [DEBUG]    |                                                                                                    |
[2022-10-11 08:05:27,430] [meta.py:371]               [DEBUG]    | Final Template Attributes: {'sort_title': '+3_Music', 'sync_mode': 'sync', 'smart_label': 'audience_rating.desc'} |
[2022-10-11 08:05:27,430] [meta.py:372]               [DEBUG]    |                                                                                                    |
[2022-10-11 08:05:27,430] [builder.py:219]            [INFO]     |=================================== Validating Music Attributes ====================================|
[2022-10-11 08:05:27,439] [builder.py:488]            [DEBUG]    |                                                                                                    |
[2022-10-11 08:05:27,439] [builder.py:489]            [DEBUG]    | Validating Method: sync_mode                                                                       |
[2022-10-11 08:05:27,439] [builder.py:493]            [DEBUG]    | Value: sync                                                                                        |
[2022-10-11 08:05:27,440] [builder.py:538]            [DEBUG]    |                                                                                                    |
[2022-10-11 08:05:27,440] [builder.py:539]            [DEBUG]    | Validating Method: smart_label                                                                     |
[2022-10-11 08:05:27,440] [builder.py:544]            [DEBUG]    | Value: audience_rating.desc                                                                        |
[2022-10-11 08:05:27,456] [builder.py:627]            [DEBUG]    |                                                                                                    |
[2022-10-11 08:05:27,456] [builder.py:631]            [DEBUG]    | Validating Method: url_poster                                                                      |
[2022-10-11 08:05:27,457] [builder.py:632]            [DEBUG]    | Value: https://raw.githubusercontent.com/MonsieurZed/poster/main/img/GENRE_MUSIC.png               |
[2022-10-11 08:05:27,640] [builder.py:627]            [DEBUG]    |                                                                                                    |
[2022-10-11 08:05:27,640] [builder.py:631]            [DEBUG]    | Validating Method: imdb_list                                                                       |
[2022-10-11 08:05:27,640] [builder.py:632]            [DEBUG]    | Value: [ordereddict([('url', 'https://www.imdb.com/search/title/?title_type=feature&release_date=1990-01-01,&user_rating=5.0,10.0&num_votes=100000,&genres=music'), ('limit', 200)]), ordereddict([('url', 'https://www.imdb.com/search/title/?title_type=feature&release_date=1990-01-01,&user_rating=5.0,10.0&num_votes=100000,&genres=music&sort=user_rating,desc'), ('limit', 200)])] |
[2022-10-11 08:05:28,968] [builder.py:627]            [DEBUG]    |                                                                                                    |
[2022-10-11 08:05:28,968] [builder.py:631]            [DEBUG]    | Validating Method: summary                                                                         |
[2022-10-11 08:05:28,968] [builder.py:632]            [DEBUG]    | Value: Music film is genre that revolves around music being an integral part of the characters lives. |
[2022-10-11 08:05:28,969] [builder.py:627]            [DEBUG]    |                                                                                                    |
[2022-10-11 08:05:28,969] [builder.py:631]            [DEBUG]    | Validating Method: sort_title                                                                      |
[2022-10-11 08:05:28,969] [builder.py:632]            [DEBUG]    | Value: +3_Music                                                                                    |
[2022-10-11 08:05:29,152] [builder.py:797]            [INFO]     |                                                                                                    |
[2022-10-11 08:05:29,153] [builder.py:798]            [INFO]     | Validation Successful                                                                              |
[2022-10-11 08:05:29,153] [plex_meta_manager.py:561]  [INFO]     |                                                                                                    |
[2022-10-11 08:05:29,153] [plex_meta_manager.py:563]  [INFO]     |===================================== Running Music Collection =====================================|
[2022-10-11 08:05:29,153] [plex_meta_manager.py:569]  [INFO]     |                                                                                                    |
[2022-10-11 08:05:29,153] [plex_meta_manager.py:570]  [INFO]     | Smart Movie Label                                                                                  |
                                                                 | Sort By: audience_rating.desc
                                                                 | Filter:
                                                                 |   Match all of the following:
                                                                 |     Label is Music
[2022-10-11 08:05:29,154] [plex_meta_manager.py:575]  [INFO]     | 
[2022-10-11 08:05:29,154] [plex_meta_manager.py:576]  [INFO]     | Sync Mode: sync
[2022-10-11 08:05:29,154] [plex_meta_manager.py:579]  [DEBUG]    | 
[2022-10-11 08:05:29,154] [plex_meta_manager.py:580]  [DEBUG]    | Builder: imdb_list: {'url': 'https://www.imdb.com/search/title/?title_type=feature&release_date=1990-01-01,&user_rating=5.0,10.0&num_votes=100000,&genres=music', 'limit': 200}
[2022-10-11 08:05:29,154] [plex_meta_manager.py:581]  [INFO]     | 
[2022-10-11 08:05:29,154] [imdb.py:184]               [INFO]     | Processing IMDb List: 200 Items at https://www.imdb.com/search/title/?title_type=feature&release_date=1990-01-01,&user_rating=5.0,10.0&num_votes=100000,&genres=music
[2022-10-11 08:05:32,802] [imdb.py:135]               [DEBUG]    | 47 IMDb IDs Found: ['tt3704428', 'tt2582802', 'tt10366460', 'tt1981677', 'tt6966692', 'tt3890160', 'tt2380307', 'tt3783958', 'tt1727824', 'tt5363618', 'tt0253474', 'tt0181875', 'tt0298203', 'tt1517451', 'tt0332379', 'tt4062536', 'tt0190590', 'tt0200550', 'tt0358273', 'tt2948372', 'tt8079248', 'tt0120888', 'tt1398426', 'tt0120855', 'tt0146882', 'tt0103855', 'tt0322330', 'tt0105793', 'tt1980929', 'tt2848292', 'tt0462590', 'tt1436562', 'tt0350258', 'tt0445922', 'tt1131729', 'tt2042568', 'tt0366548', 'tt0249462', 'tt0396555', 'tt0451079', 'tt1355630', 'tt0426931', 'tt0365830', 'tt0108394', 'tt1226229', 'tt0907657', 'tt0758766']
[2022-10-11 08:05:32,802] [builder.py:1540]           [DEBUG]    | 
[2022-10-11 08:05:32,803] [builder.py:1541]           [DEBUG]    | 47 IDs Found: [('tt3704428', 'imdb'), ('tt2582802', 'imdb'), ('tt10366460', 'imdb'), ('tt1981677', 'imdb'), ('tt6966692', 'imdb'), ('tt3890160', 'imdb'), ('tt2380307', 'imdb'), ('tt3783958', 'imdb'), ('tt1727824', 'imdb'), ('tt5363618', 'imdb'), ('tt0253474', 'imdb'), ('tt0181875', 'imdb'), ('tt0298203', 'imdb'), ('tt1517451', 'imdb'), ('tt0332379', 'imdb'), ('tt4062536', 'imdb'), ('tt0190590', 'imdb'), ('tt0200550', 'imdb'), ('tt0358273', 'imdb'), ('tt2948372', 'imdb'), ('tt8079248', 'imdb'), ('tt0120888', 'imdb'), ('tt1398426', 'imdb'), ('tt0120855', 'imdb'), ('tt0146882', 'imdb'), ('tt0103855', 'imdb'), ('tt0322330', 'imdb'), ('tt0105793', 'imdb'), ('tt1980929', 'imdb'), ('tt2848292', 'imdb'), ('tt0462590', 'imdb'), ('tt1436562', 'imdb'), ('tt0350258', 'imdb'), ('tt0445922', 'imdb'), ('tt1131729', 'imdb'), ('tt2042568', 'imdb'), ('tt0366548', 'imdb'), ('tt0249462', 'imdb'), ('tt0396555', 'imdb'), ('tt0451079', 'imdb'), ('tt1355630', 'imdb'), ('tt0426931', 'imdb'), ('tt0365830', 'imdb'), ('tt0108394', 'imdb'), ('tt1226229', 'imdb'), ('tt0907657', 'imdb'), ('tt0758766', 'imdb')]
[2022-10-11 08:05:32,803] [builder.py:1542]           [DEBUG]    | 
[2022-10-11 08:06:04,943] [plex_meta_manager.py:702]  [DEBUG]    | Traceback (most recent call last):
                                                                 |   File "//plex_meta_manager.py", line 583, in run_collection
                                                                 |     builder.filter_and_save_items(builder.gather_ids(method, value))
                                                                 |   File "/modules/builder.py", line 1559, in filter_and_save_items
                                                                 |     _id, tmdb_type = self.config.Convert.imdb_to_tmdb(input_id, fail=True)
                                                                 |   File "/modules/convert.py", line 113, in imdb_to_tmdb
                                                                 |     cache_id, cache_type, expired = self.config.Cache.query_imdb_to_tmdb_map(imdb_id, imdb=True, return_type=True)
                                                                 |   File "/modules/cache.py", line 304, in query_imdb_to_tmdb_map
                                                                 |     return self._query_map("imdb_to_tmdb_map", _id, from_id, to_id, media_type=media_type, return_type=return_type)
                                                                 |   File "/modules/cache.py", line 345, in _query_map
                                                                 |     cursor.execute(f"SELECT * FROM {map_name} WHERE {from_id} = ?", (_id,))
                                                                 | sqlite3.OperationalError: database is locked
                                                                 | 
[2022-10-11 08:06:04,945] [plex_meta_manager.py:703]  [ERROR]    | Unknown Error: database is locked
[2022-10-11 08:06:04,945] [plex_meta_manager.py:708]  [INFO]     | 
[2022-10-11 08:06:04,946] [plex_meta_manager.py:709]  [INFO]     |====================================================================================================|
[2022-10-11 08:06:04,946] [plex_meta_manager.py:709]  [INFO]     |                                     Finished Music Collection                                      |
[2022-10-11 08:06:04,946] [plex_meta_manager.py:709]  [INFO]     |                                    Collection Run Time: 0:00:37                                    |
[2022-10-11 08:06:04,946] [plex_meta_manager.py:709]  [INFO]     |====================================================================================================|
